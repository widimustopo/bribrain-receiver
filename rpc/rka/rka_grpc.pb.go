// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: rpc/rka/rka.proto

package rka

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RkaServiceClient is the client API for RkaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RkaServiceClient interface {
	Adduser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error)
	AddRKA(ctx context.Context, in *RKA, opts ...grpc.CallOption) (*ResponseRKA, error)
	AddUserRKA(ctx context.Context, in *UserRKA, opts ...grpc.CallOption) (*ResponseUserRKA, error)
	AccumulationRKA(ctx context.Context, in *RequestAccumulation, opts ...grpc.CallOption) (*ResponseAccumulationRKA, error)
}

type rkaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRkaServiceClient(cc grpc.ClientConnInterface) RkaServiceClient {
	return &rkaServiceClient{cc}
}

func (c *rkaServiceClient) Adduser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, "/rka.RkaService/Adduser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkaServiceClient) AddRKA(ctx context.Context, in *RKA, opts ...grpc.CallOption) (*ResponseRKA, error) {
	out := new(ResponseRKA)
	err := c.cc.Invoke(ctx, "/rka.RkaService/AddRKA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkaServiceClient) AddUserRKA(ctx context.Context, in *UserRKA, opts ...grpc.CallOption) (*ResponseUserRKA, error) {
	out := new(ResponseUserRKA)
	err := c.cc.Invoke(ctx, "/rka.RkaService/AddUserRKA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkaServiceClient) AccumulationRKA(ctx context.Context, in *RequestAccumulation, opts ...grpc.CallOption) (*ResponseAccumulationRKA, error) {
	out := new(ResponseAccumulationRKA)
	err := c.cc.Invoke(ctx, "/rka.RkaService/AccumulationRKA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RkaServiceServer is the server API for RkaService service.
// All implementations must embed UnimplementedRkaServiceServer
// for forward compatibility
type RkaServiceServer interface {
	Adduser(context.Context, *User) (*ResponseUser, error)
	AddRKA(context.Context, *RKA) (*ResponseRKA, error)
	AddUserRKA(context.Context, *UserRKA) (*ResponseUserRKA, error)
	AccumulationRKA(context.Context, *RequestAccumulation) (*ResponseAccumulationRKA, error)
	mustEmbedUnimplementedRkaServiceServer()
}

// UnimplementedRkaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRkaServiceServer struct {
}

func (UnimplementedRkaServiceServer) Adduser(context.Context, *User) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adduser not implemented")
}
func (UnimplementedRkaServiceServer) AddRKA(context.Context, *RKA) (*ResponseRKA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRKA not implemented")
}
func (UnimplementedRkaServiceServer) AddUserRKA(context.Context, *UserRKA) (*ResponseUserRKA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRKA not implemented")
}
func (UnimplementedRkaServiceServer) AccumulationRKA(context.Context, *RequestAccumulation) (*ResponseAccumulationRKA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccumulationRKA not implemented")
}
func (UnimplementedRkaServiceServer) mustEmbedUnimplementedRkaServiceServer() {}

// UnsafeRkaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RkaServiceServer will
// result in compilation errors.
type UnsafeRkaServiceServer interface {
	mustEmbedUnimplementedRkaServiceServer()
}

func RegisterRkaServiceServer(s grpc.ServiceRegistrar, srv RkaServiceServer) {
	s.RegisterService(&RkaService_ServiceDesc, srv)
}

func _RkaService_Adduser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkaServiceServer).Adduser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rka.RkaService/Adduser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkaServiceServer).Adduser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkaService_AddRKA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RKA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkaServiceServer).AddRKA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rka.RkaService/AddRKA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkaServiceServer).AddRKA(ctx, req.(*RKA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkaService_AddUserRKA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRKA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkaServiceServer).AddUserRKA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rka.RkaService/AddUserRKA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkaServiceServer).AddUserRKA(ctx, req.(*UserRKA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkaService_AccumulationRKA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccumulation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkaServiceServer).AccumulationRKA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rka.RkaService/AccumulationRKA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkaServiceServer).AccumulationRKA(ctx, req.(*RequestAccumulation))
	}
	return interceptor(ctx, in, info, handler)
}

// RkaService_ServiceDesc is the grpc.ServiceDesc for RkaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RkaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rka.RkaService",
	HandlerType: (*RkaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Adduser",
			Handler:    _RkaService_Adduser_Handler,
		},
		{
			MethodName: "AddRKA",
			Handler:    _RkaService_AddRKA_Handler,
		},
		{
			MethodName: "AddUserRKA",
			Handler:    _RkaService_AddUserRKA_Handler,
		},
		{
			MethodName: "AccumulationRKA",
			Handler:    _RkaService_AccumulationRKA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rka/rka.proto",
}
